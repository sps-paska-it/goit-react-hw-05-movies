{"version":3,"file":"static/js/387.8185b3b6.chunk.js","mappings":"iTAEMA,EAAM,+BACNC,EAAM,mCAECC,EAAW,mCAAG,oGACFC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,uCAA+CC,IAD7C,cACnBG,EADmB,yBAElBA,EAASC,MAFS,2CAAH,qDAKXC,EAAiB,mCAAG,WAAMC,GAAN,uFACRJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACUC,EADV,kBACuBM,IAFf,cACzBH,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAOjBG,EAAkB,mCAAG,WAAMC,GAAN,uFACTN,EAAAA,EAAAA,IAAA,UAAaH,EAAb,kBAA0BS,EAA1B,oBAA8CR,IADrC,cAC1BG,EAD0B,yBAEzBA,EAASC,MAFgB,2CAAH,sDAKlBK,EAAS,mCAAG,WAAMD,GAAN,uFACAN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACLS,EADK,4BACuBR,IAFvB,cACjBG,EADiB,yBAIhBA,EAASC,MAJO,2CAAH,sDAOTM,EAAY,mCAAG,WAAMF,GAAN,uFACHN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACLS,EADK,4BACuBR,IAFpB,cACpBG,EADoB,yBAInBA,EAASC,MAJU,2CAAH,qD,0IC3BZO,EAAOC,EAAAA,EAAAA,GAAH,gIAQJC,EAAMD,EAAAA,EAAAA,IAAH,4DAKHE,EAAOF,EAAAA,EAAAA,GAAH,gEAIJG,EAAWH,EAAAA,EAAAA,EAAH,yF,4BC+BrB,EA3Ca,WACX,OAAwBI,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAaR,OAXAE,EAAAA,EAAAA,YAAU,WACRL,GAAa,IACbX,EAAAA,EAAAA,GAAUc,GACPG,MAAK,YAAe,IAAZT,EAAW,EAAXA,KACPC,EAAQD,EACT,IACAU,OAAM,SAAAC,GAAG,OAAIN,EAASM,EAAIC,QAAjB,IACTC,SAAQ,WACPV,GAAa,EACd,GACJ,GAAE,CAACG,KAEF,iCACE,SAACZ,EAAD,UACGM,EAAKc,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACnC,OACE,UAACrB,EAAD,YACE,SAACD,EAAD,CACEuB,IACEH,EAAY,yCAC0BA,GAClC,sCAENI,IAAKH,KAEP,SAACnB,EAAD,UAAWmB,KACX,UAACnB,EAAD,yBAAsBoB,OAVbH,EAad,OAEF,SAACM,EAAA,EAAD,CAAQC,QAASpB,IACjBE,IAAS,SAAC,IAAD,CAAMmB,UAAU,SAAhB,SAA0BnB,MAGzC,C,sFC9CYiB,EAAS,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACvB,OACE,SAAC,IAAD,CACEE,MAAM,SACNF,QAASA,EACTG,KAAM,IACN,aAAW,kBACX,cAAY,UAGjB,C,sECVYC,E,QAAO/B,EAAAA,EAAH,gE","sources":["api/fetch-movies.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Loader/Loader.jsx","components/Text/Text.styled.js"],"sourcesContent":["import axios from 'axios';\n\nconst URL = 'https://api.themoviedb.org/3';\nconst KEY = '5a1775956ea4e1cf9e88872469faee97';\n\nexport const fetchMovies = async () => {\n  const response = await axios.get(`${URL}/trending/movie/day?api_key=${KEY}`);\n  return response.data;\n};\n\nexport const fetchSubmitMovies = async query => {\n  const response = await axios.get(\n    `${URL}/search/movie?api_key=${KEY}&query=${query}`\n  );\n  return response.data;\n};\n\nexport const fetchDetailsMovies = async movie_id => {\n  const response = await axios.get(`${URL}/movie/${movie_id}?api_key=${KEY}`);\n  return response.data;\n};\n\nexport const fetchCast = async movie_id => {\n  const response = await axios.get(\n    `${URL}/movie/${movie_id}/credits?api_key=${KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchReviews = async movie_id => {\n  const response = await axios.get(\n    `${URL}/movie/${movie_id}/reviews?api_key=${KEY}`\n  );\n  return response.data;\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  padding-top: 20px;\n  background-color: #ffffff;\n`;\n\nexport const Img = styled.img`\n  width: 150px;\n  margin: 0 auto;\n`;\n\nexport const Item = styled.ul`\n  flex-basis: calc((100% - 60px) / 4);\n`;\n\nexport const Paragraf = styled.p`\n  font-size: 12px;\n  padding-top: 10px;\n  text-align: center;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCast } from 'api/fetch-movies';\nimport { Img, Item, List, Paragraf } from './Cast.styled';\nimport { Loader } from 'components/Loader/Loader';\nimport { Text } from 'components/Text/Text.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetchCast(movieId)\n      .then(({ cast }) => {\n        setCast(cast);\n      })\n      .catch(err => setError(err.message))\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [movieId]);\n  return (\n    <>\n      <List>\n        {cast.map(({ id, profile_path, name, character }) => {\n          return (\n            <Item key={id}>\n              <Img\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                    : 'https://via.placeholder.com/148x222'\n                }\n                alt={name}\n              />\n              <Paragraf>{name}</Paragraf>\n              <Paragraf>Character: {character}</Paragraf>\n            </Item>\n          );\n        })}\n      </List>\n      {<Loader loading={isLoading} />}\n      {error && <Text textAlign=\"center\">{error}</Text>}\n    </>\n  );\n};\n\nexport default Cast;\n","import ClipLoader from 'react-spinners/ClipLoader';\n\nexport const Loader = ({ loading }) => {\n  return (\n    <ClipLoader\n      color=\"orange\"\n      loading={loading}\n      size={100}\n      aria-label=\"Loading Spinner\"\n      data-testid=\"loader\"\n    />\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Text = styled.p`\n  font-size: 30px;\n  font-weight: 700;\n`;\n"],"names":["URL","KEY","fetchMovies","axios","response","data","fetchSubmitMovies","query","fetchDetailsMovies","movie_id","fetchCast","fetchReviews","List","styled","Img","Item","Paragraf","useState","cast","setCast","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","then","catch","err","message","finally","map","id","profile_path","name","character","src","alt","Loader","loading","textAlign","color","size","Text"],"sourceRoot":""}