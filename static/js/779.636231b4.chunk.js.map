{"version":3,"file":"static/js/779.636231b4.chunk.js","mappings":"iTAEMA,EAAM,+BACNC,EAAM,mCAECC,EAAW,mCAAG,oGACFC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,uCAA+CC,IAD7C,cACnBG,EADmB,yBAElBA,EAASC,MAFS,2CAAH,qDAKXC,EAAiB,mCAAG,WAAMC,GAAN,uFACRJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACUC,EADV,kBACuBM,IAFf,cACzBH,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAOjBG,EAAkB,mCAAG,WAAMC,GAAN,uFACTN,EAAAA,EAAAA,IAAA,UAAaH,EAAb,kBAA0BS,EAA1B,oBAA8CR,IADrC,cAC1BG,EAD0B,yBAEzBA,EAASC,MAFgB,2CAAH,sDAKlBK,EAAS,mCAAG,WAAMD,GAAN,uFACAN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACLS,EADK,4BACuBR,IAFvB,cACjBG,EADiB,yBAIhBA,EAASC,MAJO,2CAAH,sDAOTM,EAAY,mCAAG,WAAMF,GAAN,uFACHN,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACLS,EADK,4BACuBR,IAFpB,cACpBG,EADoB,yBAInBA,EAASC,MAJU,2CAAH,qD,sFC3BZO,EAAS,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACvB,OACE,SAAC,IAAD,CACEC,MAAM,SACND,QAASA,EACTE,KAAM,IACN,aAAW,kBACX,cAAY,UAGjB,C,sICVYC,EAAOC,EAAAA,EAAAA,GAAH,uIAQJC,EAAWD,EAAAA,EAAAA,EAAH,mD,4BCqCrB,EAxCgB,WACd,OAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAcR,OAZAE,EAAAA,EAAAA,YAAU,WACRL,GAAa,IACbZ,EAAAA,EAAAA,IAAae,GACVG,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACPT,EAAWS,EACZ,IACAC,OAAM,SAAAC,GAAG,OAAIP,EAASO,EAAIC,QAAjB,IACTC,SAAQ,WACPX,GAAa,EACd,GACJ,GAAE,CAACG,KAGF,iCACE,SAACd,EAAA,EAAD,CAAQC,QAASS,IACfF,EAAQe,QAGR,SAACnB,EAAD,UACGI,EAAQgB,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC1B,OACE,2BACE,qCAAaD,MACb,SAACpB,EAAD,UAAWqB,MAFJF,EAKZ,OAVH,qEAaDb,IAAS,SAAC,IAAD,CAAMgB,UAAU,SAAhB,SAA0BhB,MAGzC,C,sEC3CYiB,E,QAAOxB,EAAAA,EAAH,gE","sources":["api/fetch-movies.js","components/Loader/Loader.jsx","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","components/Text/Text.styled.js"],"sourcesContent":["import axios from 'axios';\n\nconst URL = 'https://api.themoviedb.org/3';\nconst KEY = '5a1775956ea4e1cf9e88872469faee97';\n\nexport const fetchMovies = async () => {\n  const response = await axios.get(`${URL}/trending/movie/day?api_key=${KEY}`);\n  return response.data;\n};\n\nexport const fetchSubmitMovies = async query => {\n  const response = await axios.get(\n    `${URL}/search/movie?api_key=${KEY}&query=${query}`\n  );\n  return response.data;\n};\n\nexport const fetchDetailsMovies = async movie_id => {\n  const response = await axios.get(`${URL}/movie/${movie_id}?api_key=${KEY}`);\n  return response.data;\n};\n\nexport const fetchCast = async movie_id => {\n  const response = await axios.get(\n    `${URL}/movie/${movie_id}/credits?api_key=${KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchReviews = async movie_id => {\n  const response = await axios.get(\n    `${URL}/movie/${movie_id}/reviews?api_key=${KEY}`\n  );\n  return response.data;\n};\n","import ClipLoader from 'react-spinners/ClipLoader';\n\nexport const Loader = ({ loading }) => {\n  return (\n    <ClipLoader\n      color=\"orange\"\n      loading={loading}\n      size={100}\n      aria-label=\"Loading Spinner\"\n      data-testid=\"loader\"\n    />\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding-top: 20px;\n  background-color: #ffffff;\n`;\n\nexport const Paragraf = styled.p`\n  padding: 10px 0 0 20px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchReviews } from 'api/fetch-movies';\nimport { List, Paragraf } from './Reviews.styled';\nimport { Loader } from 'components/Loader/Loader';\nimport { Text } from 'components/Text/Text.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetchReviews(movieId)\n      .then(({ results }) => {\n        setReviews(results);\n      })\n      .catch(err => setError(err.message))\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [movieId]);\n\n  return (\n    <>\n      <Loader loading={isLoading} />\n      {!reviews.length ? (\n        <p>We don't have any reviews for this movie.</p>\n      ) : (\n        <List>\n          {reviews.map(({ id, author, content }) => {\n            return (\n              <li key={id}>\n                <h4>Author: {author}</h4>\n                <Paragraf>{content}</Paragraf>\n              </li>\n            );\n          })}\n        </List>\n      )}\n      {error && <Text textAlign=\"center\">{error}</Text>}\n    </>\n  );\n};\n\nexport default Reviews;\n","import styled from '@emotion/styled';\n\nexport const Text = styled.p`\n  font-size: 30px;\n  font-weight: 700;\n`;\n"],"names":["URL","KEY","fetchMovies","axios","response","data","fetchSubmitMovies","query","fetchDetailsMovies","movie_id","fetchCast","fetchReviews","Loader","loading","color","size","List","styled","Paragraf","useState","reviews","setReviews","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","then","results","catch","err","message","finally","length","map","id","author","content","textAlign","Text"],"sourceRoot":""}