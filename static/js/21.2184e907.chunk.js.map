{"version":3,"file":"static/js/21.2184e907.chunk.js","mappings":"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","sources":["api/fetch-movies.js","components/Loader/Loader.jsx","components/MoviesList/MovieList.styled.js","components/MoviesList/MoviesList.jsx","components/Text/Text.styled.js","components/FormSearch/FormSearch.styled.js","components/FormSearch/FormSearch.jsx","pages/MoviesSearch.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst URL = 'https://api.themoviedb.org/3';\nconst KEY = '5a1775956ea4e1cf9e88872469faee97';\n\nexport const fetchMovies = async () => {\n  const response = await axios.get(`${URL}/trending/movie/day?api_key=${KEY}`);\n  return response.data;\n};\n\nexport const fetchSubmitMovies = async query => {\n  const response = await axios.get(\n    `${URL}/search/movie?api_key=${KEY}&query=${query}`\n  );\n  return response.data;\n};\n\nexport const fetchDetailsMovies = async movie_id => {\n  const response = await axios.get(`${URL}/movie/${movie_id}?api_key=${KEY}`);\n  return response.data;\n};\n\nexport const fetchCast = async movie_id => {\n  const response = await axios.get(\n    `${URL}/movie/${movie_id}/credits?api_key=${KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchReviews = async movie_id => {\n  const response = await axios.get(\n    `${URL}/movie/${movie_id}/reviews?api_key=${KEY}`\n  );\n  return response.data;\n};\n","import ClipLoader from 'react-spinners/ClipLoader';\n\nexport const Loader = ({ loading }) => {\n  return (\n    <ClipLoader\n      color=\"orange\"\n      loading={loading}\n      size={100}\n      aria-label=\"Loading Spinner\"\n      data-testid=\"loader\"\n    />\n  );\n};\n","import { Link } from 'react-router-dom';\nimport styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  margin-left: 10px;\n  margin-top: 15px;\n  gap: 5px;\n`;\n\nexport const LinkStyled = styled(Link)`\n  :hover {\n    color: orange;\n  }\n`;\n","import { useLocation } from 'react-router-dom';\nimport { List, LinkStyled } from './MovieList.styled';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <List>\n      {movies.map(({ id, title }) => {\n        return (\n          <li key={id}>\n            <LinkStyled to={`/movies/${id}`} state={{ from: location }}>\n              {title}\n            </LinkStyled>\n          </li>\n        );\n      })}\n    </List>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Text = styled.p`\n  font-size: 30px;\n  font-weight: 700;\n`;\n","import styled from '@emotion/styled';\n\nexport const SearchFormStyled = styled.form`\n  display: inline-flex;\n  align-items: center;\n  position: relative;\n  text-transform: uppercase;\n`;\n\nexport const Input = styled.input`\n  width: 250px;\n  height: 20px;\n\n  border-style: none;\n  border: 1px solid rgba(255, 255, 255, 0.5);\n  border-radius: 4px;\n\n  padding: 8px 32px 8px 8px;\n  font: inherit;\n  border-color: black;\n\n  cursor: pointer;\n`;\n\nexport const BtnSearch = styled.button`\n  position: absolute;\n  right: 3px;\n\n  width: 30px;\n  height: 30px;\n\n  background-color: #fff;\n`;\n","import { useState } from 'react';\nimport { SearchFormStyled, BtnSearch, Input } from './FormSearch.styled';\nimport { FiSearch } from 'react-icons/fi';\n\nexport const FormSearch = ({ propSubmit }) => {\n  const [query, setQuery] = useState('');\n\n  const onSubmit = e => {\n    e.preventDefault();\n    if (!query) {\n      alert('Enter the name fo the country');\n      return;\n    }\n    propSubmit(query);\n  };\n\n  return (\n    <SearchFormStyled onSubmit={onSubmit}>\n      <BtnSearch type=\"submit\">\n        <FiSearch size=\"16px\" />\n      </BtnSearch>\n      <Input\n        type=\"text\"\n        name=\"movie\"\n        pattern=\"^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$\"\n        title=\"Please enter a valid movie name consisting of only letters and optionally separated by spaces, commas, periods, apostrophes, or hyphens.\"\n        placeholder=\"The name of the movies\"\n        autoComplete=\"off\"\n        required\n        onChange={e => setQuery(e.target.value.trim())}\n      />\n    </SearchFormStyled>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchSubmitMovies } from 'api/fetch-movies';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { Loader } from 'components/Loader/Loader';\nimport { Text } from 'components/Text/Text.styled';\nimport { FormSearch } from 'components/FormSearch/FormSearch';\n\nconst MoviesSearch = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const query = searchParams.get('q');\n    if (!query) return;\n    setIsLoading(true);\n    fetchSubmitMovies(query)\n      .then(({ results }) => {\n        setMovies(results);\n      })\n      .catch(err => setError(err.message))\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [searchParams]);\n\n  const onSubmit = q => {\n    setSearchParams({ q });\n  };\n\n  return (\n    <>\n      <FormSearch propSubmit={onSubmit} />\n      <MoviesList movies={movies} />\n      {<Loader loading={isLoading} />}\n      {error && <Text textAlign=\"center\">{error}</Text>}\n    </>\n  );\n};\n\nexport default MoviesSearch;\n"],"names":["URL","KEY","fetchMovies","axios","response","data","fetchSubmitMovies","query","fetchDetailsMovies","movie_id","fetchCast","fetchReviews","Loader","loading","color","size","List","styled","LinkStyled","Link","MoviesList","movies","location","useLocation","map","id","title","to","state","from","Text","SearchFormStyled","Input","BtnSearch","FormSearch","propSubmit","useState","setQuery","onSubmit","e","preventDefault","alert","type","name","pattern","placeholder","autoComplete","required","onChange","target","value","trim","setMovies","useSearchParams","searchParams","setSearchParams","isLoading","setIsLoading","error","setError","useEffect","get","then","results","catch","err","message","finally","q","textAlign"],"sourceRoot":""}